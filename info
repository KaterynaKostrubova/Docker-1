docker-machine ls
- Char

docker container ls
 - overlord

 docker run

 --tty , -t		Allocate a pseudo-TTY
 --interactive , -i		Keep STDIN open even if not attached

 docker run -it debian /bin/sh

 --detach , -d		Run container in background and print container ID

 --env , -e		Set environment variables

 --volume , -v		Bind mount a volume

docker inspect 

--format , -f		Format the output using the given Go template

docker network create	Create a network

-------------------------
1. docker-machine create --driver virtualbox Char
	docker-machine ls

2. docker-machine ip Char
	192.168.99.xxx

3. eval $(docker-machine env Char)
	eval "$(docker-machine env -u)" сбросить переменные докер (или открыть новую оболочку шел)
	env|grep DOCKER

4. docker pull hello-world
	docker images -a
	docker image ls
	docker image rm / docker rmi  Image - удаление
		#Если
			#Error response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 1ee1f7122cda is using its referenced image fce289e99eb9
		# то сначала нужно удалить container 1ee1f7122cda а потом сам Image или использовать -f
	-a Show all images (default hides intermediate images)	

5. docker run hello-world
	Hello from Docker!
	This message shows that your installation appears to be working correctly.

	To generate this message, Docker took the following steps:
	 1. The Docker client contacted the Docker daemon.
	 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
	    (amd64)
	 3. The Docker daemon created a new container from that image which runs the
	    executable that produces the output you are currently reading.
	 4. The Docker daemon streamed that output to the Docker client, which sent it
	    to your terminal.

	To try something more ambitious, you can run an Ubuntu container with:
	 $ docker run -it ubuntu bash

	Share images, automate workflows, and more with a free Docker ID:
	 https://hub.docker.com/

	For more examples and ideas, visit:
	 https://docs.docker.com/get-started/

6. docker run -d --name overlord -p 5000:80 --restart=always nginx
		docker ps
		http://192.168.99.xxx:5000/ - Welcome to nginx
		docker inspect -f "{{ .HostConfig.RestartPolicy }}" overlord -> {always}

	 --detach , -d		Run container in background and print container ID
	 --name 			Assign a name to the container
	 --publish , -p		Publish a container’s port(s) to the host
	 --restart			Restart policy to apply when a container exits

7. docker inspect --format='{{.NetworkSettings.IPAddress}}' overlord
	172.17.0.2

	docker inspect overlord - see all settings
	--format , -f		Format the output using the given Go template

8. docker run -it --rm alpine /bin/sh
	--interactive , -i		Keep STDIN open even if not attached
	--tty , -t				Allocate a pseudo-TTY
	--rm		Automatically remove the container when it exits

	/ # whoami
		root
	/ # exit
	docker ps -a -> нет alpine

9. apt-get update && apt-get upgrade -y && apt-get install -y gcc git

	docker run -it --rm debian /bin/sh

	# whoami  
		root
	# hostname
		0400b81fc131 (ex.)

	git clone https://github.com/docker/docker.git -> done

	apt-get install vim
	vim -> 
	#include <stdio.h>
	int main(void)
	{
		printf("%s", "hello world");
		return 0;
	}
	gcc -Wall -o hello hello.c
	./hello
		hello world#

10. docker volume create hatchery

11. docker volume ls

12. 
#docker run -d --name spawning-pool --restart=always -e MYSQL_DATABASE=zerglings -e MYSQL_ROOT_PASSWORD=Kerrigan -v hatchery:/var/lib/mysql mysql

docker run -d --name spawning-pool --restart=always -e MYSQL_DATABASE=zerglings -e MYSQL_ROOT_PASSWORD=Kerrigan -v hatchery:/var/lib/mysql -v /Users/kate:/etc/mysql/conf.d mysql

my.cnf=> {
	[mysqld]
	default-authentication-plugin=mysql_native_password
	skip-name-resolve=1
}

	 docker inspect  -f "{{ json .Mounts }}" spawning-pool
	 	[{"Type":"volume","Name":"hatchery","Source":"/mnt/sda1/var/lib/docker/volumes/hatchery/_data","Destination":"/var/lib/mysql","Driver":"local","Mode":"z","RW":true,"Propagation":""}]

	 docker inspect -f "{{ .HostConfig.RestartPolicy }}" spawning-pool
	 	{always ..}

	 docker exec -it spawning-pool mysql -uroot -p
	 enter pass: Kerrigan
	 Welcome to the MySQL monitor.
		mysql> SHOW DATABASES;
		+--------------------+
		| Database           |
		+--------------------+
		| information_schema |
		| mysql              |
		| performance_schema |
		| sys                |
		| zerglings          |
		+--------------------+
		5 rows in set (0.00 sec)

#Launch a mysql container as a background task 				-> docker run -d --name mysql
#restart in case of error									-> --restart=on-failure 
#the root password of the database should be Kerrigan		-> -e MYSQL_ROOT_PASSWORD=Kerrigan
#the database is stored in the hatchery volume				-> -v hatchery:/var/lib/mysql
#the container directly creates a database named zerglings  -> -e MYSQL_DATABASE=zerglings
#that the container itself is named spawning-pool.			-> --name spawning-pool

13. docker inspect -f '{{.Config.Env}}' spawning-pool

	[MYSQL_DATABASE=zerglings MYSQL_ROOT_PASSWORD=Kerrigan PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin GOSU_VERSION=1.7 MYSQL_MAJOR=8.0 MYSQL_VERSION=8.0.19-1debian10]

14. docker run -d --name lair -p 8080:80 -e WORDPRESS_DB_PASSWORD=Kerrigan -e WORDPRESS_DB_NAME=zerglings --restart=always --link spawning-pool:mysql wordpress

	#docker run -d --name lair -p 8080:80 --restart=always --link spawning-pool:mysql wordpress
	https://habr.com/ru/post/260053/

15. docker run -d --name roach-warden -p 8081:80 --link spawning-pool:db phpmyadmin/phpmyadmin
	http://192.168.99.103:8081/
	root
	Kerrigan

16. docker logs -f spawning-pool
	mysql 8.0.11 docker: mbind: Operation not permitted:
		The error prevents certain NUMA operations from being carried out, for most use cases this won't impact the server (certain workflows get a performance improvement with NUMA).
		Note that there is a bug in MySQL here; The server doesn't handle the missing permission, so the error message is directly from the os.
	service:
	  mysql:
	    image: mysql:8.0.15
	    ...
	    cap_add:
	      - SYS_NICE  # CAP_SYS_NICE

17. docker ps - display all the currently active containers

18.docker restart overlord
	docker exec -it overlord /bin/sh -c "kill 1"
	docker inspect -f '{{.RestartCount}}' overlord
	 -> 1

19. docker run -d -it --name Abathur -p 3000:3000 -v $HOME:/root python:2-slim
	docker exec Abathur pip install --upgrade pip
	docker exec Abathur pip install Flask
	docker exec --env FLASK_APP=/root/hello.py Abathur flask run --host=0.0.0.0 --port=3000

	hello.py ->
		from flask import Flask
		app = Flask(__name__)

		@app.route('/')
		def hello_world():
		    return '<h1>Hello World!</h1>'

	    if __name__ == '__main__':
	        app.run(debug=True, host='0.0.0.0', port=3000)

20. docker swarm init --advertise-addr $(docker-machine ip Char)

	docker node ls
		HOSTNAME Char
		MANAGER STATUS Leader

21. docker-machine create --driver virtualbox Aiur

22. docker-machine ssh Aiur "docker swarm join --token $(docker swarm join-token worker -q) $(docker-machine ip Char):2377"
	docker node ls
		HOSTNAME Char
		MANAGER STATUS Leader
		HOSTNAME Char
		MANAGER STATUS Aiur

->?23. docker network create -d overlay overmind

24. docker service create --name orbital-command --network overmind -e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=root rabbitmq

25. docker service ls
	docker service ps orbital-command -> running
	docker service inspect -f "{{ .Spec.TaskTemplate.ContainerSpec }}" orbital-command -> RABBITMQ_DEFAULT_USER=root RABBITMQ_DEFAULT_PASS=root

26. docker service create --name engineering-bay --network overmind --replicas 2 -e OC_USERNAME=root -e OC_PASSWD=root 42school/engineering-bay

	docker service ps engineering-bay -> 
		2 repliques 
	docker service inspect -f "{{ .Spec.TaskTemplate.ContainerSpec }}" engineering-bay -> 
		OC_USERNAME=root OC_PASSWD=root

27. docker service logs engineering-bay

28. docker service create -d --name marines --network overmind -e OC_USERNAME=root -e OC_PASSWD=root --replicas 2 42school/marine-squad

docker service ps marines
docker service inspect -f "{{ .Spec.TaskTemplate.ContainerSpec }}" marines

29. docker service ps marines

30. docker service scale -d marines=20
#docker service update --replicas 20 marines
docker service ps marines -> 20 running

31. docker service rm $(docker service ls -q) 
	docker service ls

32. docker rm -f $(docker ps -aq)
	docker ps -a

33. docker rmi $(docker images -q)
	docker images ls

34. docker-machine rm -y Aiur
docker-machine ls


01 Dokerfile
FROM alpine
MAINTAINER kkostrub <kkostrub@student.unit.ua>
RUN apk update && apk upgrade && apk add vim
ENTRYPOINT vim

#docker build -t name dir_with_dokerfile
#docker run -it --rm name


VBoxManage modifyvm "Char" --natpf1 "teamspeak,udp,,9987,,9987"





could not find driver -> pdo_mysql

'error: Rewrite engine': apatch.conf -> LoadModule rewrite_module modules/mod_rewrite.so








